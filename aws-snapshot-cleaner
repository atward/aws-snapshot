#!/usr/bin/env python
# https://github.com/nbutler19/scripts/blob/master/python/snapshot-rotation.py

import boto3
import argparse
import time, sys, logging, datetime

TAG_KEY='Backup:Expires'

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-l',
        '--log',
        dest='loglevel',
        default='INFO',
        choices=['CRITICAL','FATAL','ERROR','WARN','WARNING','INFO','DEBUG','NOTSET'],
        help='the loglevel sets the amount of output you want'
    )
    parser.add_argument(
        '-n',
        '--dry-run',
        dest='dryrun',
        action='store_true',
        default=False,
        help='Dry run. Do everything but deleting snapshots',
    )
    return parser.parse_args()

def get_numeric_loglevel(loglevel):
    return getattr(logging, loglevel.upper())

def convert_iso_to_datetime(string):
    return datetime.datetime.strptime(string, "%Y-%m-%dT%H:%M:%S.%f")

def expired(current_time, expires_time):
    delta = expires_time - current_time
    if delta.total_seconds() > 0:
        return False
    else:
        return True

def get_tag(tag_key, tags={}):
    for tag in tags:
        if tag['Key'] == tag_key:
            return tag['Value']

def get_snapshots(conn):
    return conn.snapshots.filter(OwnerIds=['self'], Filters=[{'Name':'tag-key', 'Values': [TAG_KEY]}])

def purge_snapshots(snapshots, simulate=False):
    for snapshot in snapshots:
        now = datetime.datetime.now()
        iso_time = get_tag(TAG_KEY, snapshot.tags)
        if iso_time:
            expires = convert_iso_to_datetime(iso_time)
            if expired(now, expires):
                # do someting
                logging.info("Purging expired snapshot %s %s" % (snapshot.id, iso_time))
                if simulate:
                    logging.info("DRY RUN")
                else:
                    if snapshot.delete():
                        logging.info("SUCCESS")
                    else:
                        logging.info("FAILURE")
            else:
                logging.debug("%s not expired yet: %s" % (snapshot.id, iso_time))
        else:
            logging.debug("No Backup:Expires for %s %s...skipping" % (snapshot.id, snapshot.description))
            next

def run(loglevel=logging.INFO, dryrun=False):
    logging.basicConfig(format='%(asctime)s:%(levelname)s:%(message)s', level=loglevel)
    conn = boto3.resource('ec2')
    snapshots = get_snapshots(conn)
    purge_snapshots(snapshots, dryrun)

def lambda_handler(event, context):
    run()

def main():
    args = get_args()
    numeric_level = get_numeric_loglevel(args.loglevel)
    run(numeric_level, args.dryrun)

if __name__ == '__main__':
    main()
